name: Release
permissions:
  contents: "write"
on:
  workflow_run:
    workflows: ["Create Release"]
    types:
      - "completed"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  BLOCKMESH_LOG_ENV: ${{ vars.BLOCKMESH_LOG_ENV }}
  LEPTOS_OUTPUT_NAME: block-mesh-manager
  LEPTOS_SITE_ROOT: target/site
  LEPTOS_SITE_PKG_DIR: pkg
  LEPTOS_SITE_ADDR: 127.0.0.1:8000
  LEPTOS_RELOAD_PORT: 3001
  LEPTOS_LIB_DIR: libs/block-mesh-manager
  LEPTOS_BIN_DIR: libs/block-mesh-manager
  LEPTOS_HASH_FILES: true
  APP_ENVIRONMENT: production
  SENTRY: ${{ secrets.SENTRY }}
  MAPBOX: ${{ secrets.MAPBOX }}
#  SCCACHE_GHA_ENABLED: "true"
#  RUSTC_WRAPPER: "sccache"
jobs:
  get-tag:
    name: "Get Tag From Package Version"
    runs-on: "ubuntu-latest"
    outputs:
      pkg-version: ${{ steps.pkg-version.outputs.PKG_VERSION }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ vars.RUSTC_VERSION }}
          targets: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
        with:
          key: release-tag-server
          cache-all-crates: true
      #      - name: Sccache Action
      #        uses: Mozilla-Actions/sccache-action@v0.0.5
      - name: "Get tag"
        id: "pkg-version"
        shell: "bash"
        run: |
          echo PKG_VERSION=$(grep -m 1 '^version' Cargo.toml | sed -e 's/^version\s*=\s*//' | sed -e 's/"//g') >> $GITHUB_OUTPUT
  upload-assets:
    name: "Upload assets to Github releases"
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - "get-tag"
    strategy:
      matrix:
        include:
          - target: "x86_64-unknown-linux-gnu"
            os: "ubuntu-latest"
          - target: "x86_64-unknown-linux-musl"
            os: "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - name: "Install deps"
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config openssl libssl-dev
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ vars.RUSTC_VERSION }}
          targets: wasm32-unknown-unknown
      - name: "Cache"
        uses: Swatinem/rust-cache@v2
        with:
          key: release-upload-${{ matrix.target }}
          cache-all-crates: true
      #      - name: Sccache Action
      #        uses: Mozilla-Actions/sccache-action@v0.0.5
      - name: "Install Cargo Leptos"
        run: |
          cargo install cargo-leptos --version=${{ vars.LEPTOS_VERSION }} --locked
      - name: "Run Cargo Leptos"
        run: |
          cargo leptos build --project block-mesh-manager --release
          tar acf block-mesh-manager-${{ matrix.target }}.tar.gz target/release/block-mesh-manager target/release/hash.txt target/site
      - name: "Build CLI"
        run: |
          cargo build -p blockmesh-cli --release
          tar acf blockmesh-cli-${{ matrix.target }}.tar.gz target/release/blockmesh-cli
      - name: "Build Worker"
        run: |
          cargo build -p block-mesh-manager-worker --release
          tar acf block-mesh-manager-worker-${{ matrix.target }}.tar.gz target/release/block-mesh-manager-worker
      - name: "Build API"
        run: |
          cargo build -p block-mesh-manager-api --release
          tar acf block-mesh-manager-api-${{ matrix.target }}.tar.gz target/release/block-mesh-manager-api
      - name: "Build Feature Flags Server"
        run: |
          cargo build -p feature-flags-server --release
          tar acf feature-flags-server-${{ matrix.target }}.tar.gz target/release/feature-flags-server
      - name: Release
        uses: softprops/action-gh-release@v2
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: v${{ needs.get-tag.outputs.pkg-version }}
          files: |
            block-mesh-manager-${{ matrix.target }}.tar.gz
            block-mesh-manager-worker-${{ matrix.target }}.tar.gz
            blockmesh-cli-${{ matrix.target }}.tar.gz
            feature-flags-server-${{ matrix.target }}.tar.gz
            block-mesh-manager-api-${{ matrix.target }}.tar.gz
  push-to-registry:
    name: "Push Docker image to Docker Hub"
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs:
      - "get-tag"
      - "upload-assets"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Check out the repo"
        uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ vars.RUSTC_VERSION }}
          targets: wasm32-unknown-unknown
      - name: "Cache"
        uses: Swatinem/rust-cache@v2
        with:
          key: release-push
          cache-all-crates: true
      #      - name: Sccache Action
      #        uses: Mozilla-Actions/sccache-action@v0.0.5
      - name: "Log in to Docker Hub"
        uses: "docker/login-action@v3"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: "Extract metadata (tags, labels) for Docker"
        id: "meta"
        uses: "docker/metadata-action@v5"
        with:
          images: "blockmesh/block-mesh-manager"
      - name: "Build and push Docker image"
        uses: "docker/build-push-action@v5"
        with:
          context: .
          file: block-mesh-manager.Dockerfile
          push: true
          tags: blockmesh/block-mesh-manager:latest-amd64,blockmesh/block-mesh-manager:v${{ needs.get-tag.outputs.pkg-version }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: "Build and push Docker image for worker"
        uses: "docker/build-push-action@v5"
        with:
          context: .
          file: block-mesh-manager-worker.Dockerfile
          push: true
          tags: blockmesh/block-mesh-manager-worker:latest-amd64,blockmesh/block-mesh-manager-worker:v${{ needs.get-tag.outputs.pkg-version }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: "Build and push Docker image for feature flags server"
        uses: "docker/build-push-action@v5"
        with:
          context: .
          file: feature-flags-server.Dockerfile
          push: true
          tags: blockmesh/feature-flags-server:latest-amd64,blockmesh/feature-flags-server:v${{ needs.get-tag.outputs.pkg-version }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: "Build and push Docker image for feature flags server"
        uses: "docker/build-push-action@v5"
        with:
          context: .
          file: block-mesh-manager-api.Dockerfile
          push: true
          tags: blockmesh/block-mesh-manager-api:latest-amd64,blockmesh/block-mesh-manager-api:v${{ needs.get-tag.outputs.pkg-version }}
          labels: ${{ steps.meta.outputs.labels }}
# https://codingpackets.com/blog/rust-binary-and-docker-releases-using-github-actions/