/*
 Generated by typeshare 1.9.2
*/

export interface GetTaskResponse {
	id: string;
	url: string;
	method: string;
	headers: object;
	body: object;
}

export interface GetTaskRequest {
	email: string;
	api_token: string;
}

export interface SubmitTaskRequest {
	email: string;
	api_token: string;
	task_id: string;
	response_code?: number;
	country?: string;
	ip?: string;
	asn?: string;
	colo?: string;
	response_time?: number;
}

export interface ConfirmEmailRequest {
	token: string;
}

export interface ClientsMetadata {
	depin_aggregator?: string;
	device_type: string;
}

export interface ReportUptimeRequest {
	email: string;
	api_token: string;
	ip?: string;
}

export interface DashboardRequest {
	email: string;
	api_token: string;
}

export interface ReportUptimeResponse {
	status_code: number;
}

export interface SubmitTaskResponse {
	status_code: number;
}

export interface GetTokenRequest {
	email: string;
	password: string;
}

export interface GetEmailViaTokenRequest {
	token: string;
}

export interface GetEmailViaTokenResponse {
	email: string;
}

export interface CheckTokenRequest {
	email: string;
	api_token: string;
}

export interface GetTokenResponse {
	api_token: string;
	message?: string;
}

export interface GetStatsRequest {
	email: string;
	api_token: string;
}

export interface Stat {
	day: Date;
	tasks_count: number;
}

export interface GetStatsResponse {
	stats: Stat[];
}

export interface LoginForm {
	email: string;
	password: string;
}

export interface ResetPasswordForm {
	email: string;
}

export interface ResendConfirmEmailForm {
	email: string;
}

export interface NewPasswordQuery {
	token: string;
}

export interface NewPasswordForm {
	email: string;
	token: string;
	password: string;
	password_confirm: string;
}

export interface RegisterForm {
	email: string;
	password: string;
	password_confirm: string;
	invite_code: string;
}

export interface RegisterResponse {
	status_code: number;
	error?: string;
}

export interface GetUserUptimeRequest {
	email: string;
	api_token: string;
}

export interface GetLatestInviteCodeRequest {
	email: string;
	api_token: string;
}

export interface GetUserUptimeResponse {
	user_id: string;
	start_time: Date;
	end_time: Date;
	duration_seconds?: number;
	status_code: number;
}

export interface GetLatestInviteCodeResponse {
	invite_code: string;
}

export interface ReportBandwidthRequest {
	email: string;
	api_token: string;
	download_speed: number;
	upload_speed: number;
	latency: number;
	city: string;
	country: string;
	ip: string;
	asn: string;
	colo: string;
}

export interface ReportBandwidthResponse {
	status_code: number;
}

export interface DailyStatForDashboard {
	tasks_count: number;
	uptime: number;
	day: Date;
	points: number;
}

export interface PerkUI {
	id: string;
	name: string;
	multiplier: number;
}

export interface CallToActionUI {
	id: string;
	name: string;
	status: boolean;
}

export interface Referral {
	email: string;
	created_at: Date;
	verified_email: boolean;
}

export interface UserIpInfo {
	ip: string;
	country?: string;
	updated_at: Date;
}

export interface DashboardResponse {
	upload: number;
	download: number;
	latency: number;
	uptime: number;
	tasks: number;
	points: number;
	number_of_users_invited: number;
	invite_code: string;
	connected: boolean;
	daily_stats: DailyStatForDashboard[];
	perks: PerkUI[];
	calls_to_action: CallToActionUI[];
	referrals: Referral[];
	verified_email: boolean;
	user_ips: UserIpInfo[];
}

export interface AuthStatusResponse {
	status_code: number;
	logged_in: boolean;
	wallet_address?: string;
	email?: string;
}

export interface RunTaskResponse {
	status: number;
	raw: string;
}

export interface ConnectWalletRequest {
	pubkey: string;
	message: string;
	signature: number[];
}

export interface ConnectWalletResponse {
	status: number;
}

export interface EditInviteCodeForm {
	new_invite_code: string;
}

export interface CallToActionForm {
	name: string;
	status: boolean;
}

export interface LeaderBoardUser {
	email: string;
	points?: number;
}

export interface DailyLeaderboard {
	day: Date;
	leaderboard_users: LeaderBoardUser[];
}

